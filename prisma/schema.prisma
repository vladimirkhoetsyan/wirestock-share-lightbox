generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model analytics {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  share_link_id String?      @db.Uuid
  media_item_id String?      @db.Uuid
  event         String?
  duration_ms   Int?
  ip            String?
  user_agent    String?
  created_at    DateTime?    @default(now()) @db.Timestamp(6)
  referrer      String?
  screen_size   String?
  session_id    String?
  geo_country   String?
  geo_region    String?
  media_items   media_items? @relation(fields: [media_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  share_links   share_links? @relation(fields: [share_link_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model lightboxes {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  keywords      String[]
  types         String[]
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  deleted       Boolean        @default(false)
  media_items   media_items[]
  notifications Notification[]
  share_links   share_links[]
}

model media_items {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lightbox_id      String?     @db.Uuid
  s3_uri           String
  media_type       String?
  duration_seconds Int?
  dimensions       String?
  order            Int?        @default(0)
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  deleted          Boolean     @default(false)
  analytics        analytics[]
  lightboxes       lightboxes? @relation(fields: [lightbox_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sessions {
  id         Int       @id @default(autoincrement())
  user_id    String
  token      String    @unique
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([token])
}

model share_links {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lightbox_id   String?        @db.Uuid
  token         String         @unique
  name          String
  password_hash String?
  revoked       Boolean?       @default(false)
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  theme         String?        @default("dark")
  analytics     analytics[]
  notifications Notification[]
  lightboxes    lightboxes?    @relation(fields: [lightbox_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique
  password_hash String
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  notificationReceipts NotificationReceipt[]
}

model Notification {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lightbox_id      String   @db.Uuid
  share_link_id    String   @db.Uuid
  session_id       String
  entered_at       DateTime @default(now()) @db.Timestamp(6)
  password_correct Boolean

  // Relations
  lightbox         lightboxes   @relation(fields: [lightbox_id], references: [id], onDelete: Cascade)
  share_link       share_links  @relation(fields: [share_link_id], references: [id], onDelete: Cascade)
  receipts         NotificationReceipt[]
  @@index([lightbox_id])
  @@index([share_link_id])
  @@index([session_id])
  @@map("notifications")
}

model NotificationReceipt {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  notification_id  String   @db.Uuid
  admin_user_id    String   @db.Uuid
  seen             Boolean  @default(false)
  seen_at          DateTime?

  // Relations
  notification     Notification @relation(fields: [notification_id], references: [id], onDelete: Cascade)
  admin_user       users        @relation(fields: [admin_user_id], references: [id], onDelete: Cascade)
  @@index([notification_id])
  @@index([admin_user_id])
  @@map("notification_receipts")
}
