generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model analytics {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  share_link_id String?      @db.Uuid
  media_item_id String?      @db.Uuid
  event         String?
  duration_ms   Int?
  ip            String?
  user_agent    String?
  created_at    DateTime?    @default(now()) @db.Timestamp(6)
  media_items   media_items? @relation(fields: [media_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  share_links   share_links? @relation(fields: [share_link_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model lightboxes {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  keywords    String[]
  types       String[]
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  media_items media_items[]
  share_links share_links[]
  deleted     Boolean       @default(false)
}

model media_items {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lightbox_id      String?     @db.Uuid
  s3_uri           String
  media_type       String?
  duration_seconds Int?
  dimensions       String?
  order            Int?        @default(0)
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  analytics        analytics[]
  lightboxes       lightboxes? @relation(fields: [lightbox_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deleted          Boolean     @default(false)
}

model sessions {
  id         Int       @id @default(autoincrement())
  user_id    String
  token      String    @unique
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([token])
}

model share_links {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lightbox_id   String?     @db.Uuid
  token         String      @unique
  name          String
  password_hash String?
  revoked       Boolean?    @default(false)
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  analytics     analytics[]
  lightboxes    lightboxes? @relation(fields: [lightbox_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique
  password_hash String
  created_at    DateTime? @default(now()) @db.Timestamp(6)
}
